import streamlit as st
import os
from anaf_api import ApiANAF

def display_pkcs11_auth_sidebar():
    """
    Afi탳eaz캒 칥n bara lateral캒 c칙mpurile necesare pentru autentificarea PKCS#11.
    Aceast캒 func탵ie NU este cache-uit캒 탳i trebuie apelat캒 pe fiecare pagin캒.

    Returneaz캒:
        bool: True dac캒 este necesar캒 introducerea PIN-ului 탳i execu탵ia trebuie oprit캒,
              False 칥n caz contrar.
    """
    pkcs11_lib = os.getenv("PKCS11_LIB_PATH")
    
    # Afi탳캒m c칙mpul pentru PIN doar dac캒 metoda PKCS#11 este configurat캒 탳i PIN-ul nu este deja 칥n sesiune
    if pkcs11_lib and 'pkcs11_pin' not in st.session_state:
        st.sidebar.subheader("游댏 Autentificare Token USB")
        pin_input = st.sidebar.text_input(
            "Introduce탵i PIN-ul token-ului", 
            type="password", 
            help="PIN-ul este necesar pentru a comunica cu serverul ANAF folosind token-ul USB."
        )
        if st.sidebar.button("Salveaz캒 PIN"):
            if pin_input:
                st.session_state['pkcs11_pin'] = pin_input
                st.rerun()
            else:
                st.sidebar.warning("PIN-ul nu poate fi gol.")
        # Return캒m True pentru a semnala paginii s캒 se opreasc캒 p칙n캒 la introducerea PIN-ului
        return True
    # Return캒m False dac캒 nu este nevoie de PIN sau dac캒 a fost deja introdus
    return False

@st.cache_resource
def get_anaf_client():
    """
    Creeaz캒 탳i returneaz캒 un client pentru API-ul ANAF, gestion칙nd toate metodele de autentificare.
    Folose탳te st.cache_resource pentru a men탵ine clientul pe durata sesiunii.
    Solicit캒 PIN-ul interactiv pentru autentificarea PKCS#11.
    """
    # Detecteaz캒 metoda de autentificare pe baza variabilelor de mediu
    auth_method = None
    access_token = os.getenv("ANAF_ACCESS_TOKEN")
    cert_path = os.getenv("ANAF_CERT_PATH")
    key_path = os.getenv("ANAF_KEY_PATH")
    pkcs11_lib = os.getenv("PKCS11_LIB_PATH")
    client_args = {}

    if access_token:
        auth_method = "OAuth2"
        client_args = {"access_token": access_token}
    elif cert_path and key_path:
        auth_method = "Certificat"
        client_args = {"cert_path": cert_path, "key_path": key_path}
    elif pkcs11_lib:
        auth_method = "PKCS#11"
        
        # --- NOU: Verificare explicit캒 a existen탵ei fi탳ierului .dll ---
        if not os.path.exists(pkcs11_lib):
            st.error(f"**Fi탳ierul bibliotecii PKCS#11 nu a fost g캒sit!**\n\n"
                     f"Calea configurat캒 칥n `.env` este:\n`{pkcs11_lib}`\n\n"
                     "Verifica탵i urm캒toarele:\n"
                     "1. Calea este corect캒 탳i nu con탵ine gre탳eli de scriere.\n"
                     "2. A탵i folosit double backslash (`\\\\`) 칥n fi탳ierul `.env` (ex: `C:\\\\Windows\\\\...`).\n"
                     "3. Fi탳ierul `.dll` exist캒 la loca탵ia specificat캒.")
            st.stop()

        # Pentru PKCS#11, PIN-ul este citit din session_state.
        # Func탵ia UI `display_pkcs11_auth_sidebar` trebuie apelat캒 pe pagin캒 칥nainte de acest apel.
        client_args = {"pkcs11_lib": pkcs11_lib, "pkcs11_pin": st.session_state.get('pkcs11_pin')}
    
    if not auth_method:
        st.error("Nicio metod캒 de autentificare ANAF nu este configurat캒 corect 칥n fi탳ierul .env. "
                 "Verifica탵i pagina de Set캒ri pentru detalii.")
        st.stop()
    
    try:
        # Ini탵ializ캒m clientul API cu argumentele determinate
        client = ApiANAF(**client_args)
        return client
    except Exception as e:
        st.error(f"Eroare la ini탵ializarea clientului ANAF: {e}")
        # Dac캒 eroarea este legat캒 de PKCS#11, ar putea fi din cauza unui PIN gre탳it.
        # Oferim utilizatorului o modalitate de a reintroduce PIN-ul.
        if auth_method == "PKCS#11" and 'pkcs11_pin' in st.session_state:
            del st.session_state['pkcs11_pin']
            st.warning("A ap캒rut o eroare, posibil din cauza unui PIN incorect. V캒 rug캒m re칥ncerca탵i.")
        st.stop()